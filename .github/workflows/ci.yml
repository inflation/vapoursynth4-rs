name: CI

on:
  push:
    branches:
      - master
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: Unit Tests
    timeout-minutes: 10
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-directories: |
            vapoursynth/
      - name: Set script path
        id: build-scripts
        shell: bash
        run: |
          if [ ${{ matrix.os }} == 'windows-latest' ]; then
            echo "BUILD_SCRIPT=scripts/build-vs.ps1" >> "$GITHUB_OUTPUT"
          else
            echo "BUILD_SCRIPT=scripts/build-vs.sh" >> "$GITHUB_OUTPUT"
          fi
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
        if: matrix.os == 'windows-latest'
      - name: Install winget
        uses: Cyberboss/install-winget@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: matrix.os == 'windows-latest'
      - name: Install VapourSynth
        run: winget install vapoursynth --disable-interactivity --accept-source-agreements --accept-package-agreements
        if: matrix.os == 'windows-latest'
      - name: Build VapourSynth in debug mode
        run: ${{ steps.build-scripts.outputs.BUILD_SCRIPT }}
      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest
      - name: Build
        run: cargo build --all-features --workspace
      - name: Tests
        run: cargo nextest run --all-features --workspace

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust Nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: llvm-tools
      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-directories: |
            vapoursynth/
      - name: Build VapourSynth in debug mode
        run: scripts/build-vs.sh
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest
      - name: Build
        run: cargo +nightly build --all-features --workspace
      - name: Generate code coverage
        run: cargo +nightly llvm-cov nextest
          --all-features --workspace
          --ignore-filename-regex vapoursynth4-sys/
          --lcov --output-path lcov.info
        env:
          VAPOURSYNTH_LIB_PATH: vapoursynth/build/lib
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true

  sanitizer:
    name: Sanitizers
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust Nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-src
      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-directories: |
            vapoursynth/
      - name: Build VapourSynth in debug mode
        run: scripts/build-vs.sh
      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest
      - name: Build
        run: cargo build --all-features --workspace
      - name: Address Sanitizer
        run:
          cargo +nightly nextest run -Z build-std --target=x86_64-unknown-linux-gnu --all-features
          -p vapoursynth4-sys -p vapoursynth4-rs
        env:
          RUSTFLAGS: "-Z sanitizer=address"
          RUSTDOCFLAGS: "-Z sanitizer=address"
          VAPOURSYNTH_LIB_PATH: vapoursynth/build/lib

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install Rust
        run: rustup update stable
      - name: Run Clippy with reviewdog
        uses: giraffate/clippy-action@v1.0.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          clippy_flags: --all-features --tests -- -D warnings
          reporter: github-check

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        run: rustup update stable
      - name: Format check
        run: cargo fmt --all -- --check
